jobs:
  check-files:
    outputs:
      RUN_GRADLE_CHECK: ${{ steps.changed-files-specific.outputs.any_changed }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      id: changed-files-specific
      name: Get changed files
      uses: tj-actions/changed-files@v44
      with:
        files_ignore: 'release-notes/*.md

          .github/**

          *.md

          '
  check-result:
    if: always()
    needs:
    - check-files
    - gradle-check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: ${{ needs.check-files.outputs.RUN_GRADLE_CHECK && needs.gradle-check.result
        == 'failure' }}
      name: Fail if gradle-check fails
      run: exit 1
  gradle-check:
    if: github.repository == 'opensearch-project/OpenSearch' && needs.check-files.outputs.RUN_GRADLE_CHECK
      == 'true'
    needs: check-files
    permissions:
      contents: read
      issues: write
      pull-requests: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout OpenSearch repo
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - continue-on-error: true
      if: github.event_name == 'pull_request_target'
      name: Setup environment variables (PR)
      run: 'echo "event_name=pull_request_target" >> $GITHUB_ENV

        echo "branch_name=$(jq --raw-output .pull_request.base.ref $GITHUB_EVENT_PATH)"
        >> $GITHUB_ENV

        echo "pr_from_sha=$(jq --raw-output .pull_request.head.sha $GITHUB_EVENT_PATH)"
        >> $GITHUB_ENV

        echo "pr_from_clone_url=$(jq --raw-output .pull_request.head.repo.clone_url
        $GITHUB_EVENT_PATH)" >> $GITHUB_ENV

        echo "pr_to_clone_url=$(jq --raw-output .pull_request.base.repo.clone_url
        $GITHUB_EVENT_PATH)" >> $GITHUB_ENV

        echo "pr_title=$(jq --raw-output .pull_request.title $GITHUB_EVENT_PATH)"
        >> $GITHUB_ENV

        echo "pr_number=$(jq --raw-output .pull_request.number $GITHUB_EVENT_PATH)"
        >> $GITHUB_ENV

        echo "pr_owner=$(jq --raw-output .pull_request.user.login $GITHUB_EVENT_PATH)"
        >> $GITHUB_ENV

        echo "pr_or_commit_description=$(jq --ascii-output .pull_request.body $GITHUB_EVENT_PATH)"
        >> $GITHUB_ENV

        echo "post_merge_action=false" >> $GITHUB_ENV

        '
    - continue-on-error: true
      id: get_pr_data
      if: github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: "return (\n  await github.rest.repos.listPullRequestsAssociatedWithCommit({\n\
          \    commit_sha: context.sha,\n    owner: context.repo.owner,\n    repo:\
          \ context.repo.repo,\n  })\n).data[0];\n"
    - continue-on-error: true
      if: github.event_name == 'push'
      name: Setup environment variables (Push)
      run: 'repo_url="https://github.com/opensearch-project/OpenSearch"

        ref_id=$(git rev-parse HEAD)

        branch_name=$(git rev-parse --abbrev-ref HEAD)

        echo "branch_name=$branch_name" >> $GITHUB_ENV

        echo "event_name=push" >> $GITHUB_ENV

        echo "pr_from_sha=$ref_id" >> $GITHUB_ENV

        echo "pr_from_clone_url=$repo_url" >> $GITHUB_ENV

        echo "pr_to_clone_url=$repo_url" >> $GITHUB_ENV

        echo "pr_title=Push trigger $branch_name $ref_id $repo_url" >> $GITHUB_ENV

        echo "pr_owner=$(jq --raw-output ''.commits[0].author.username'' $GITHUB_EVENT_PATH)"
        >> $GITHUB_ENV

        echo ''pr_number=${{ fromJson(steps.get_pr_data.outputs.result).number }}''
        >> $GITHUB_ENV

        echo "pr_or_commit_description=$(jq --ascii-output .head_commit.message $GITHUB_EVENT_PATH)"
        >> $GITHUB_ENV

        echo "post_merge_action=true" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Checkout opensearch-build repo
      uses: actions/checkout@v4
      with:
        path: opensearch-build
        ref: main
        repository: opensearch-project/opensearch-build
    - continue-on-error: true
      name: Trigger jenkins workflow to run gradle check
      run: 'set -e

        set -o pipefail

        bash opensearch-build/scripts/gradle/gradle-check.sh ${{ secrets.JENKINS_GRADLE_CHECK_GENERIC_WEBHOOK_TOKEN
        }} | tee -a gradle-check.log

        '
    - continue-on-error: true
      if: always()
      name: Setup Result Status
      run: 'WORKFLOW_URL=`cat gradle-check.log | grep ''WORKFLOW_URL'' | awk ''{print
        $2}''`

        RESULT=`cat gradle-check.log | grep ''Result:'' | awk ''{print $2}''`

        echo "workflow_url=$WORKFLOW_URL" >> $GITHUB_ENV

        echo "result=$RESULT" >> $GITHUB_ENV

        '
    - continue-on-error: true
      if: success()
      name: Upload Coverage Report
      uses: codecov/codecov-action@v4
      with:
        files: ./codeCoverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
    - continue-on-error: true
      if: ${{ github.event_name == 'pull_request_target' && success() && env.result
        == 'SUCCESS' }}
      name: Create Comment Success
      uses: peter-evans/create-or-update-comment@v4
      with:
        body: ':white_check_mark: Gradle check result for ${{ env.pr_from_sha }}:
          [${{ env.result }}](${{ env.workflow_url }})

          '
        issue-number: ${{ env.pr_number }}
    - continue-on-error: true
      if: ${{ github.event_name == 'pull_request_target' && env.result != 'SUCCESS'
        }}
      name: Extract Test Failure
      run: "TEST_FAILURES=`curl -s \"${{ env.workflow_url }}/testReport/api/json?tree=suites\\\
        [cases\\[status,className,name\\]\\]\" | jq -r '.. | objects | select(.status==\"\
        FAILED\",.status==\"REGRESSION\") | (.className + \".\" +  .name)' | uniq\
        \ -c | sort -n -r | head -n 10`\nif [[ \"$TEST_FAILURES\" != \"\" ]]\nthen\n\
        \  echo \"test_failures<<EOF\" >> $GITHUB_ENV\n  echo \"\" >> $GITHUB_ENV\n\
        \  echo \"* **TEST FAILURES:**\" >> $GITHUB_ENV\n  echo '```' >> $GITHUB_ENV\n\
        \  echo \"$TEST_FAILURES\" >> $GITHUB_ENV\n  echo '```' >> $GITHUB_ENV\n \
        \ echo \"EOF\" >> $GITHUB_ENV\nfi\n"
    - continue-on-error: true
      if: ${{ github.event_name == 'pull_request_target' && success() && env.result
        != 'SUCCESS' }}
      name: Create Comment Flaky
      uses: peter-evans/create-or-update-comment@v4
      with:
        body: ':grey_exclamation: Gradle check result for ${{ env.pr_from_sha }}:
          [${{ env.result }}](${{ env.workflow_url }}) ${{ env.test_failures }}


          Please review all [flaky tests](https://github.com/opensearch-project/OpenSearch/blob/main/DEVELOPER_GUIDE.md#flaky-tests)
          that succeeded after retry and create an issue if one does not already exist
          to track the flaky failure.

          '
        issue-number: ${{ env.pr_number }}
    - continue-on-error: true
      if: ${{ github.event_name == 'pull_request_target' && failure() }}
      name: Create Comment Failure
      uses: peter-evans/create-or-update-comment@v4
      with:
        body: ':x: Gradle check result for ${{ env.pr_from_sha }}: [${{ env.result
          }}](${{ env.workflow_url }})


          Please examine the workflow log, locate, and copy-paste the failure(s) below,
          then iterate to green. Is the failure [a flaky test](https://github.com/opensearch-project/OpenSearch/blob/main/DEVELOPER_GUIDE.md#flaky-tests)
          unrelated to your change?

          '
        issue-number: ${{ env.pr_number }}
    timeout-minutes: 130
name: Gradle Check (Jenkins)
on:
  repository_dispatch:
    types: trigger-ga___gradle-check.yml
permissions:
  contents: read
